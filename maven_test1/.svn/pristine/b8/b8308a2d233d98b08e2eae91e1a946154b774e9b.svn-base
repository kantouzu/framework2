package com.cisdi.business.controller;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import com.alibaba.fastjson.JSONArray;
import com.cisdi.base.common.enums.CommonEnumType.DeleteFlag;
import com.cisdi.base.controller.BaseController;
import com.cisdi.base.util.BaseUtil;
import com.cisdi.business.example.UserRelRoleExample;
import com.cisdi.business.example.UserdepartRelRoleExample;
import com.cisdi.business.responseBean.LayerTree;
import com.cisdi.business.service.UserInfoService;
import com.cisdi.business.service.UserRelDepartService;
import com.cisdi.business.service.UserRelRoleService;
import com.cisdi.business.service.UserdepartRelRoleService;


@Controller
public class IndexController extends BaseController{
	@Autowired
	private UserInfoService userInfoService;
	@Autowired
	private UserRelRoleService userRelRoleService;
	@Autowired
	private UserRelDepartService userRelDepartService;
	@Autowired
	private UserdepartRelRoleService userdepartRelRoleService;
	
	@RequestMapping("home")
	public ModelAndView index(HttpServletRequest req) {
		ModelAndView view = createTreeLayoutView("layout/layout", req);
		
		/**
         * 设置菜单的时候
         * 先查询该用户是否用非业务角色或者业务角色
         */
		
		Integer userId = BaseUtil.convertSessionUser(getSessionUser(req)).getId();
		//先查看session中保存的当前业务角色种类，没有的话先塞进去
		if(BaseUtil.isEmpty(req.getSession().getAttribute("roleMap"))){
			boolean hasRole = false;
			boolean hasBusinessRole = false;
			//查询是否有非业务角色
			UserRelRoleExample userRelRoleExample = new UserRelRoleExample();
			userRelRoleExample.or().andUserIdEqualTo(userId);
			Integer userRelRoleCount = (Integer) userRelRoleService.countByExample(userRelRoleExample).getObj();
			hasRole = userRelRoleCount <= 0?false:true;
			//查询是否有业务角色
			Map<String, Object> paramMap = new HashMap<String, Object>();
			paramMap.put("userId", userId);
			paramMap.put("deleteflag", DeleteFlag.未删除.getValue());
			Integer userdepartRelRoleCount = (Integer) userdepartRelRoleService.countRoleByExample(paramMap).getObj();
			hasBusinessRole = userdepartRelRoleCount <= 0?false:true;
			Map<String, Object> roleMap = new HashMap<String, Object>();
			roleMap.put("hasRole", hasRole);
			roleMap.put("hasBusinessRole", hasBusinessRole);
			req.getSession().setAttribute("roleMap", roleMap);
		}
		/*List<LayerTree> ModuleList = new ArrayList<LayerTree>();
		boolean hasRole = (boolean) ((Map<String, Object>) req.getSession().getAttribute("roleMap")).get("hasRole");
		boolean hasBusinessRole = (boolean) ((Map<String, Object>) req.getSession().getAttribute("roleMap")).get("hasBusinessRole");
		*//**
		 * 如果有且只有一种角色，则直接加载对应的菜单即可
		 *//*
		if(!hasBusinessRole && hasRole){
			//只有非业务角色
			ModuleList = userInfoService.getMenus(userId);
		}else if(hasBusinessRole && !hasRole){
			//只有业务角色
			ModuleList = userInfoService.getBusinessMenus(userId);
		}else if(hasBusinessRole && hasRole){
			//两者都有，则默认加载业务角色的菜单
			ModuleList = userInfoService.getBusinessMenus(userId);
		}
		
		req.getSession().setAttribute("menus", JSONArray.toJSONString(ModuleList));*/
		
		view.addObject("user", getSessionUser(req).getObj());
		return view;
	}
}
