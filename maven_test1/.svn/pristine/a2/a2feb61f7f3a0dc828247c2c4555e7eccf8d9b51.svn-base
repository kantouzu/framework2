package com.cisdi.business.service.impl;

import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.cisdi.base.common.GlobalConfigHolder;
import com.cisdi.base.common.SessionTokenLoader;
import com.cisdi.base.common.enums.CommonEnumType.DeleteFlag;
import com.cisdi.base.common.json.AjaxJson;
import com.cisdi.base.util.DateUtil;
import com.cisdi.business.dao.SessionTokenDao;
import com.cisdi.business.dao.UserInfoDao;
import com.cisdi.business.entity.SessionToken;
import com.cisdi.business.entity.UserInfo;
import com.cisdi.business.example.SessionTokenExample;
import com.cisdi.business.service.SessionTokenService;

@Service
public class SessionTokenServiceImpl implements SessionTokenService {

    @Autowired
    private SessionTokenDao sessionTokenDao;
    @Autowired
    private UserInfoDao userInfoDao;
    
    @Override
    public SessionToken selectByPrimaryKey(Integer id) {
        SessionToken result = sessionTokenDao.selectByPrimaryKey(id);
        return result;
    }
    
    @Override
    public List<SessionToken> selectByExample(SessionTokenExample  record) {
        List<SessionToken> result = sessionTokenDao.selectByExample(record);
        return result;
    }    

    @Override
    public AjaxJson insertSelective(SessionToken record) {
         int resultKey = sessionTokenDao.insertSelective(record);
         return AjaxJson.returnJsonObj(resultKey != 0?true:false);
    }   
    
    @Override
    public AjaxJson deleteByExample(SessionTokenExample  record) {
        int resultKey = sessionTokenDao.deleteByExample(record);
        return AjaxJson.returnJsonObj(resultKey != 0?true:false);
    }

    @Override
    public AjaxJson deleteByPrimaryKey(Integer id) {
        int resultKey = sessionTokenDao.deleteByPrimaryKey(id);
        return AjaxJson.returnJsonObj(resultKey != 0?true:false);
    }
    
    @Override
    public AjaxJson countByExample(SessionTokenExample example){
        Integer count = sessionTokenDao.countByExample(example);
        return AjaxJson.returnJsonObj(true, count);
    }
    
    @Override
    public AjaxJson updateByPrimaryKeySelective(SessionToken entity){
        int resultKey = sessionTokenDao.updateByPrimaryKeySelective(entity);
        return AjaxJson.returnJsonObj(resultKey != 0?true:false);
    }

	@Override
	public AjaxJson reloadTokenByUser(UserInfo user) {
		//先删除原token记录userInfoDao
		SessionTokenExample sessionTokenExample = new SessionTokenExample();
		sessionTokenExample.createCriteria().andUserIdEqualTo(user.getId());
		int k = sessionTokenDao.deleteByExample(sessionTokenExample);
		Map<String, Date> tokenMap = new HashMap<String, Date>();
		if(k != 0){
			//重新录入token数据
			SessionToken sessionToken = new SessionToken();
			sessionToken.setCreateTime(new Date());
			sessionToken.setDeleteflag(DeleteFlag.未删除.getValue());
			sessionToken.setExpireTime(DateUtil.dayPlus(new Date(), Integer.parseInt(GlobalConfigHolder.getProperty("token_expire_days"))));
			sessionToken.setToken(UUID.randomUUID().toString());
			sessionToken.setUserId(user.getId());
			sessionTokenDao.insertSelective(sessionToken);
			tokenMap.put(sessionToken.getToken(), sessionToken.getExpireTime());
			SessionTokenLoader.getInstance().addSessionToken(tokenMap);
		}
		return AjaxJson.returnJsonObj(true, tokenMap);
	}
    
}