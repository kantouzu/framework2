package com.cisdi.business.controller;

import java.util.List;

import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import com.alibaba.fastjson.JSONArray;
import com.cisdi.base.common.enums.CommonEnumType.YesOrNo;
import com.cisdi.base.common.json.AjaxJson;
import com.cisdi.base.common.responseBean.LayGridReturn;
import com.cisdi.base.controller.BaseController;
import com.cisdi.base.util.BaseUtil;
import com.cisdi.business.entity.Menu;
import com.cisdi.business.entity.UserInfo;
import com.cisdi.business.example.MenuExample;
import com.cisdi.business.requestBean.DataGrid;
import com.cisdi.business.responseBean.LayerTree;
import com.cisdi.business.service.MenuService;
import com.cisdi.business.service.UserInfoService;

@Controller
@RequestMapping(value="menuController")
public class MenuController extends BaseController {

    @Autowired
    private MenuService menuService;
    @Autowired
    private UserInfoService userInfoService;
    
    @RequestMapping(value = "pageList")
    public ModelAndView list(HttpServletRequest req, Menu menu, MenuExample menuExample) {
        
        ModelAndView mv = new ModelAndView();
        mv.setViewName("Menu/MenuList");
        return mv;
    }
    
    @RequestMapping(value = "dataList")
    @ResponseBody
    public LayGridReturn dataList(Menu menu, MenuExample menuExample, DataGrid datagrid) {
    	menuExample.setLimitStart(datagrid.getStartRow());
    	menuExample.setLimitEnd(datagrid.getLimit());
    	menuExample.setOrderByClause("order by id desc");
    	menuExample.or().andDeleteflagEqualTo(YesOrNo.Âê¶.getValue());
    	return menuService.selectDataGridByExample(menuExample);
    }
    
    @RequestMapping(value = "getAllMenuTree")
    @ResponseBody
    public AjaxJson getAllMenuTree(HttpServletRequest req, Menu menu, MenuExample menuExample) {
    	try {
    		List<LayerTree> ModuleList=userInfoService.getMenus(((UserInfo) getSessionUser(req).getObj()).getId());
    		return AjaxJson.returnJsonObj(true, ModuleList);
		} catch (Exception e) {
			e.printStackTrace();
			return AjaxJson.returnJsonObj(false);
		}
    }
    
    @RequestMapping(value = "goAddOrEdit")
    public ModelAndView goAddOrEdit(Menu menu, MenuExample menuExample, boolean isCheckOnly) {
        
        ModelAndView mv = new ModelAndView();
        Menu entity = menuService.selectByPrimaryKey(menu.getId());
        mv.setViewName("Menu/MenuEdit");
        mv.addObject("menu", entity);
        mv.addObject("isCheckOnly", isCheckOnly);
        return mv;
    }
    
    @RequestMapping(value = "doSaveOrUpdate", method=RequestMethod.POST)
    @ResponseBody
    public AjaxJson doSaveOrUpdate(Menu menu) {
    	AjaxJson j = null;
        try {
        	j = menuService.saveOrUpdate(menu);
        	return j;
		} catch (Exception e) {
			e.printStackTrace();
			return AjaxJson.returnJsonObj(false);
		}
    } 
    
    @RequestMapping(value = "batchDelete", method=RequestMethod.POST)
    @ResponseBody
    public AjaxJson batchDelete(@RequestParam List<Integer> ids) {
        MenuExample menuExample = new MenuExample();
        menuExample.or().andIdIn(ids);
        return menuService.deleteByExample(menuExample);
    }    
    
    @RequestMapping(value = "batchDeleteInLogic", method=RequestMethod.POST)
    @ResponseBody
    public AjaxJson batchDeleteInLogic(@RequestParam List<Integer> ids) {
        MenuExample menuExample = new MenuExample();
        menuExample.or().andIdIn(ids);
        return menuService.deleteByExampleInLogic(menuExample);
    }  
}